// <links_and_borrowing> C—Å—ã–ª–∫–∏ –∏ –ó–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è:


fn calculate_length(s: &String) -> usize {
    // s ‚Äî —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∏–ø–∞ String
    s.len()
    // –°—Å—ã–ª–∫–∏, —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã. –ú—ã –Ω–µ –º–æ¬≠
    // –∂–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–æ, –Ω–∞ —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞.

}   // –ó–¥–µ—Å—å s –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏. –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–∞ –Ω–µ –≤–ª–∞–¥–µ–µ—Ç —Ç–µ–º,
    // –Ω–∞ —á—Ç–æ –æ–Ω–∞ —Å—Å—ã–ª–∞–µ—Ç—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.


fn change_link(mutable_link: &mut String) {
    mutable_link.push_str(" >> add !!!");
}


fn create_mutable_link() {
    // –ò–∑–º–µ–Ω—è–µ–º—ã–µ —Å—Å—ã–ª–∫–∏:
    let mut s1 = String::from("Mutable Link");
    println!("\n–î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {}", s1);
    change_link(&mut s1);
    println!("\n–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {}", s1);

    // –ò–∑–º–µ–Ω—è–µ–º—ã–µ —Å—Å—ã–ª–∫–∏ –∏–º–µ—é—Ç –æ–¥–Ω–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å
    // —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–∑–º–µ–Ω—è–µ–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±¬≠
    let mut s2 = String::from("–ü–æ–ø—Ä–æ–±—É–π –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç!");
    // –ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç:
    // let r1 = &mut s2;
    // let r2 = &mut s2;
    // println!("{}, {}", r1, r2);

    // r1 –∑–¥–µ—Å—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –º—ã –º–æ–∂–µ–º –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É r2:
    {
        let r1 = &mut s2;
        println!("R1: {} ", r1);
    }

    let r2 = &mut s2;
    // –æ—à–∏–±–∫–∞[E0502]: –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–∑–∞–∏–º—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `s2` –∫–∞–∫ –∏–∑–º–µ–Ω—è–µ–º—É—é, –ø–æ—Ç–æ–º—É
    // —á—Ç–æ –æ–Ω–∞ —Ç–∞–∫–∂–µ –∑–∞–∏–º—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è:
    // let r3 = &s2;  >> —Ç–∞–∫–∂–µ –Ω–µ–ª—å–∑—è –∏–º–µ—Ç—å –∏ –≤—Ç–æ—Ä—É—é –Ω–µ –∏–∑–º–µ–Ω—è–µ–º—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –∏–∑–º–µ–Ω—è–µ–º–∞—è !!!
    // –ò–º–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö —Å—ã–ª–æ–∫ –î–û–ü–£–°–¢–ò–ú–û.
    println!("R2: {} ", r2);

}


fn create_dangling_link() -> String { // –ò–∑–º–µ–Ω–∏–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ –±—ã –∏–∑–±–µ—ç–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∏—Å—è—á–µ–π —Å—Å—ã–ª–∫–∏.
    // –í–∏—Å—è—á–∏–µ —Å—Å—ã–ª–∫–∏:
    let s = String::from("–ß—Ç–æ —Ç–æ —Ç—É—Ç –Ω–µ —Ç–æ ...");

    // –ù–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ –≤ –ö–£–ß–ï, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–±—Ä–æ—à–µ–Ω–∞ ...
    // &s

    // –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–∞–º —É–∫–∞–∑–∞—Ç–µ–ª—å, —Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –≤ –¥—Ä—É–≥—É—é –æ–±–ª–∞—Å—Ç—å:
    s

}   // –ó–¥–µ—Å—å s –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è. –ï–µ –ø–∞–º—è—Ç—å —É—Ö–æ–¥–∏—Ç. ERROR!!!


pub fn _start_examle() {
    let s1 = String::from("Hello !");

    // –ê–º–ø–µ—Ä—Å–∞–Ω–¥—ã —è–≤–ª—è—é—Ç—Å—è —Å—Å—ã–ª–∫–∞–º–∏, –æ–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ–±–µ—Ä—è –µ–≥–æ –≤–æ –≤–ª–∞–¥–µ–Ω–∏–µ.
    // –≠—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä <s1> –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–æ –≤–ª–∞–¥–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ <main()>
    // –∏ –Ω–µ –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–∏–∏ –≤ –¥—Ä—É–≥–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ (–≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å–≤–µ –∏–º–µ–Ω)
    let len_string = calculate_length(&s1);
    println!("\n–î–ª–∏–Ω–Ω–∞ –≠–∫–∑–µ–º–ø–ª—è—Ä–∞ String '{}' = {}\n", s1, len_string);

    create_mutable_link();
    println!("\n{}\n", create_dangling_link());
}


#[derive(Debug)]
struct Point {
    x: i32,
    y: i32,
}


pub fn _start_example2() {
    println!("\n\nHello, world!\n\n");
    //
    // _start_get_data();

    // 1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ (& –∏ &mut)
    let mut p1: Point = Point { x: 1, y: 2 }; // —Å–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω—è–µ–º—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    // –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ Rust:
    // –ú–æ–∂–Ω–æ –∏–º–µ—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫ (&T) –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏,
    // –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–∑–º–µ–Ω—è–µ–º–æ–π —Å—Å—ã–ª–∫–∏ (&mut T) –Ω–∞ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å.
    // –ú–æ–∂–Ω–æ –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∏–∑–º–µ–Ω—è–µ–º—É—é —Å—Å—ã–ª–∫—É (&mut T) –Ω–∞ –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏,
    // –∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–π —Å—Å—ã–ª–∫–∏ (&T) –Ω–∞ —Ç—É –∂–µ –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏.

    // –ü–æ —ç—Ç–æ–º—É –æ–±—ä—è–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–æ—Å—Ç—è—Ö –≤–∏–¥–∏–º–æ—Å—Ç–∏, —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ
    // —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ –æ–±–ª–æ—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏.
    {
        let p1_ref: &Point = &p1;  // –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ `p1`
        println!("p1 —á–µ—Ä–µ–∑ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—É—é —Å—Å—ã–ª–∫—É: {:?}", p1_ref);
    }

    {
        let p1_mut_ref: &mut Point = &mut p1; // –∏–∑–º–µ–Ω—è–µ–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ `p1`
        p1_mut_ref.x = 10; // –∏–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω—è–µ–º—É—é —Å—Å—ã–ª–∫—É
        p1_mut_ref.y = 12;
        println!("p1 –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω—è–µ–º—É—é —Å—Å—ã–ª–∫—É: {:?}", p1_mut_ref);    
    }
    
    println!("\n\nP1: {:?}", p1);

    // 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è Box<T>
    let mut p2: Box<Point> = Box::new(Point { x: 3, y: 4 }); // `p2` ‚Äî —É–º–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å `Box`, –¥–∞–Ω–Ω—ã–µ –≤—ã–¥–µ–ª–µ–Ω—ã –≤ –∫—É—á–µ
    println!("p2 —á–µ—Ä–µ–∑ Box: {:?}", p2);

    p2.x = 30; // –∏–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —É–º–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å
    println!("p2 –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Box: {:?}", p2);

    // 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—ã—Ä—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π (*const T –∏ *mut T)
    let p3: Point = Point { x: 5, y: 6 };
    let p3_ptr: *const Point = &p3; // —Å—ã—Ä–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—É—é `Point`
    let mut p4 = Point { x: 7, y: 8 };
    let p4_ptr: *mut Point = &mut p4; // —Å—ã—Ä–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∏–∑–º–µ–Ω—è–µ–º—É—é `Point`

    unsafe {
        // –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ —Å—ã—Ä—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –±–ª–æ–∫–∞ `unsafe`
        println!("p3 —á–µ—Ä–µ–∑ *const —É–∫–∞–∑–∞—Ç–µ–ª—å: {:?}", *p3_ptr); // —Ä–∞–∑—ã–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        (*p4_ptr).x = 70; // –∏–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å—ã—Ä–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å
        println!("p4 –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ *mut —É–∫–∞–∑–∞—Ç–µ–ª—å: {:?}", *p4_ptr);
    }

    let my_name = String::from("Pasha Nebrat");
    println!("\n\nMy Name: {my_name:?}");

    let ptr: *const u8 = my_name.as_ptr();  // –ü–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Å—ã—Ä–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å
    println!("Pointer to the string data: {:?}", ptr);


    {
        let hello: String = String::from("Hello üåç");
        let ptr: *const u8 = hello.as_ptr();

        unsafe {
            let slice: &[u8] = std::slice::from_raw_parts(ptr, hello.len());
            println!("Var Hello slice: {slice:?}");
            let string: &str = std::str::from_utf8(slice).expect("Invalid UTF-8");
            println!("String from pointer: {}", string);
        }
    }

    let mut my_name: String = String::from("Pasha");
    println!("My Name: {my_name}");

    let plus_str = &String::from(" and Pasha");

    my_name = String::from("Masha") + plus_str;
    println!("My Name: {my_name}");
}


// –ü—Ä–∞–≤–∏–ª–∞ —Å—Å—ã–ª–æ–∫:

// ¬Å¬Å –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–æ –Ω–µ –æ–±–∞:
//    –æ–¥–Ω–∞ –∏–∑–º–µ–Ω—è–µ–º–∞—è —Å—Å—ã–ª–∫–∞ –ª–∏–±–æ –ª—é–±–æ–µ —á–∏—Å–ª–æ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫.

// ¬Å¬Å –°—Å—ã–ª–∫–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏.
